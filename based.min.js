"use strict";var db;!function(){function doDbTasks(database){clearTimeout(dbTaskTimer),dbTaskTimer=setTimeout(function(){dbTaskWorker.onmessage=function(e){database.size=(e.data/1024).toFixed(2)+" KB"},dbTaskWorker.postMessage(JSON.stringify({id:database.getId(invoker),items:database.items}))},2e3)}function byteCount(s){return encodeURI(s).split(/%..|./).length-1}function localStorageSize(){var size=0;for(var key in localStorage)size+=byteCount(localStorage[key]);return Math.round(size/1024)+" KB"}function isUndefinedOrNull(obj){return void 0===obj||null===obj?!0:!1}function where(obj,query,value){if(obj instanceof Object==!1)throw"Can only query objects";if(!(query instanceof Object||"string"==typeof query))throw"Query is invalid";var q,match=!1,result=new TableResult;"string"==typeof query&&(q={},q[query]=value,query=q);for(var item in obj){match=!0;for(var q in query)obj[item][q]!=query[q]&&(match=!1);match&&result.push(obj[item])}return result}var invoker={},DatabaseTable=function(name,columns){if(columns instanceof Object==!1)throw"Columns format is invalid";var id=0;if(this.name=name,this.items=[],this.primaryKeys=[],this.index={},this.columns={},this.columnNames=[],this.size="0 KB",this.getId=function(){return arguments[0]===invoker?id:void 0},this.getNextId=function(){return arguments[0]===invoker?id++:void 0},this.setId=function(_id){arguments[1]===invoker&&(id=_id)},where(columns,{id:!0}).length>1)throw"You can only have one id column";if(where(columns,{primaryKey:!0}).length>1)throw"You can only have one primary key column";for(var key in columns)this.columns[key]={id:columns[key].id===!0,primaryKey:columns[key].primaryKey===!0,required:columns[key].primaryKey===!0||columns[key].required===!0,type:columns[key].hasOwnProperty("type")?columns[key].type:Object,name:key},this.columnNames.push(key);this.sync(!0)};DatabaseTable.prototype={add:function(item,_invoker){if(doDbTasks(this),item instanceof Object==!1||item instanceof Array==!0)throw"Item format is invalid";for(var key in this.columns){if(-1==this.columnNames.indexOf(key))throw"Table does not support this entry ["+key+"]";if(this.columns[key].primaryKey){if(-1!=this.primaryKeys.indexOf(item[key]))throw"An item with the same primary key has already been added";this.primaryKeys.push(item[key])}if(_invoker===invoker)this.columns[key].id&&(this.index[item[key].toString()]=item);else{if(this.columns[key].id&&void 0!==item[key])throw"Column ["+key+"] cannot be set as it is an ID column";if(this.columns[key].id){var id=this.getNextId(invoker);item[key]=id,this.index[id.toString()]=item}}if(this.columns[key].required&&isUndefinedOrNull(item[key]))throw"["+key+"] is a required field";if(void 0!==item[key]&&typeof item[key]!=typeof this.columns[key].type()&&this.columns[key].type!=Object)throw"["+key+"] was an unexpected type";item[key]=item[key]}this.items.push(item)},get:function(query){if(doDbTasks(this),"number"==typeof query){var idCol=where(this.columns,{id:!0}).first();if(idCol){var result=new TableResult;return result.push(this.index[query.toString()]),result}}return where(this.items,query)},"delete":function(query){doDbTasks(this);var _this=this;this.get(query).forEach(function(item){for(var key in _this.columns)if(_this.columns[key].id===!0){delete _this.index[item[key].toString()];break}_this.items.splice(_this.items.indexOf(item),1)})},sync:function(pull){if(pull){var data=localStorage.getItem("table_"+this.name);if(data){data=JSON.parse(data);for(var i=0;i<data.items.length;i++)this.add(data.items[i],invoker);this.setId(data.id,invoker)}}else try{localStorage.setItem("table_"+this.name,JSON.stringify({id:this.getId(invoker),items:this.items}))}catch(e){console.warn("You do not have enough local storage space to sync ["+this.name+"].\nYour local storage is currently using "+localStorageSize())}}};var TableResult=function(){};TableResult.prototype=new Array,TableResult.prototype.first=function(){return this[0]},TableResult.prototype.last=function(){return this[this.length>0?this.length-1:0]},TableResult.prototype.forEach=function(callback){if("function"!=typeof callback)throw"Missing argument";for(var i=0;i<this.length;i++)callback(this[i],i)},db={create:function(name,columns,options){return new DatabaseTable(name,columns,options)}};var dbTaskTimer,dbTaskWorker=new Worker(window.URL.createObjectURL(new Blob(["onmessage = function (e) { self.postMessage(encodeURI(e.data).split(/%..|./).length - 1); }"])))}();